#pragma checksum "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "51f1c0fef0928693a8b4425ca8b94aef5decea8b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(RemoteScreenshot.Pages.Pages_Home), @"mvc.1.0.razor-page", @"/Pages/Home.cshtml")]
namespace RemoteScreenshot.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\_ViewImports.cshtml"
using RemoteScreenshot;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "{handler?}")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"51f1c0fef0928693a8b4425ca8b94aef5decea8b", @"/Pages/Home.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"220a33f610335664b4709d29bb9d1d1548212c94", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Home : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("role", new global::Microsoft.AspNetCore.Html.HtmlString("form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "get", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-page-handler", "LabInitial", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 4 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<h4>Choose a laboratory to monitor</h4>\r\n<hr />\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51f1c0fef0928693a8b4425ca8b94aef5decea8b4689", async() => {
                WriteLiteral("\r\n    <input type=\"text\" id=\"LabId\" name=\"LabId\" class=\"w-50 form-control\" placeholder=\"Laboratory ID\" />\r\n    <button id=\"btnGet\" class=\"btn border border-1 mt-3\" type=\"submit\">Get</button>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.PageHandler = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n<hr />\r\n\r\n<!-- This creates initial elements with IDs contructed in a certain way. The initial elements will have their contents filled by a function that gets data from the DB relating to desktop info. -->\r\n");
#nullable restore
#line 16 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
 if (Model.LabDesktops.Count != 0)
{
    for (int i = 0; i < Model.LabDesktops.Count; i++)
    {
        string desktopDevicesID = $"pDesktopDevices{i}";
        string desktopNameID = $"pDesktopName{i}";


#line default
#line hidden
#nullable disable
            WriteLiteral("        <p");
            BeginWriteAttribute("id", " id=\"", 835, "\"", 854, 1);
#nullable restore
#line 23 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
WriteAttributeValue("", 840, desktopNameID, 840, 14, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" class=\"h5\"></p>\r\n        <p");
            BeginWriteAttribute("id", " id=\"", 883, "\"", 905, 1);
#nullable restore
#line 24 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
WriteAttributeValue("", 888, desktopDevicesID, 888, 17, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></p>\r\n");
#nullable restore
#line 25 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h4>Choose a desktop to shutdown</h4>\r\n<hr />\r\n\r\n<input type=\"text\" id=\"MachineName\" class=\"w-50 form-control\" placeholder=\"Machine Name\" />\r\n<button id=\"btnShutdown\" class=\"btn border border-1 mt-3\">Shutdown</button>\r\n\r\n");
#nullable restore
#line 34 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
 if (Model.LabDesktops.Count != 0)
{
    foreach (var desktop in Model.LabDesktops)
    {
        string statusID = $"p{desktop.DesktopId}";
        

#line default
#line hidden
#nullable disable
            WriteLiteral("        <p");
            BeginWriteAttribute("id", " id=\"", 1312, "\"", 1326, 1);
#nullable restore
#line 40 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
WriteAttributeValue("", 1317, statusID, 1317, 9, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral("></p>\r\n");
#nullable restore
#line 41 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral("<hr />\r\n\r\n<h4>Create an attendance session</h4>\r\n<hr />\r\n\r\n<input type=\"text\" id=\"Class\" class=\"w-50 form-control\" placeholder=\"Class name\" />\r\n<button id=\"btnCreate\" class=\"btn border border-1 mt-3\">Create</button>\r\n<hr id=\"attendances\" />\r\n\r\n");
#nullable restore
#line 52 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
 if (Model.OpenAttendances.Count != 0)
{
    foreach (var attendance in Model.OpenAttendances)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <p");
            BeginWriteAttribute("id", " id=\"", 1703, "\"", 1732, 1);
#nullable restore
#line 56 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
WriteAttributeValue("", 1708, attendance.AttendanceId, 1708, 24, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">📌 [Class] ");
#nullable restore
#line 56 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
                                               Write(attendance.Class);

#line default
#line hidden
#nullable disable
            WriteLiteral(" [Attendance ID] ");
#nullable restore
#line 56 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
                                                                                 Write(attendance.AttendanceId);

#line default
#line hidden
#nullable disable
            WriteLiteral(" [Session] ");
#nullable restore
#line 56 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
                                                                                                                    Write(attendance.Session);

#line default
#line hidden
#nullable disable
            WriteLiteral("</p>\r\n");
#nullable restore
#line 57 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
    }
}

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<hr />

<h4>Reopen an attendance session</h4>
<hr />

<input type=""text"" id=""AttendanceIdReopen"" class=""w-50 form-control"" placeholder=""Attendance ID"" />
<button id=""btnReopen"" class=""btn border border-1 mt-3"">Reopen</button>
<hr />

<h4>Close an attendance session</h4>
<hr />

<input type=""text"" id=""AttendanceIdClose"" class=""w-50 form-control"" placeholder=""Attendance ID"" />
<button id=""btnClose"" class=""btn border border-1 mt-3"">Close</button>
<hr />

");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "51f1c0fef0928693a8b4425ca8b94aef5decea8b12001", async() => {
                WriteLiteral("\r\n    <button class=\"btn border border-1 mt-3\">Sign out</button>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n\r\n    <script type=\"text/javascript\">\r\n        let interval = 10000;\r\n\r\n        setInterval(function () { IntervalUpdate(");
#nullable restore
#line 84 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
                                            Write(Model.LabId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@") }, interval);

        // onclick event to shutdown a desktop
        $(function () {
            $(""#btnShutdown"").click(function () {
                if (confirm(""Are you sure?"")) {
                    ValidateAndShutdownDesktop($(""#MachineName"").val(), ");
#nullable restore
#line 90 "C:\Users\Earth Jan\Documents\Git\Repos\computer-lab-management\Pages\Home.cshtml"
                                                                   Write(Model.LabId);

#line default
#line hidden
#nullable disable
                WriteLiteral(@");
                }
            });
        });

        // is an event for creating an attendance.
        $(function () {
            $(""#btnCreate"").click(function () {
                if (confirm(""Are you sure?"")) {
                    CreateAttendance();
                }
            });
        });

        // is an event for reopening an attendance.
        $(function () {
            $(""#btnReopen"").click(function () {
                if (confirm(""Are you sure?"")) {
                    ReopenAttendance();
                }
            });
        });

        // is an event for closing an attendance.
        $(function () {
            $(""#btnClose"").click(function () {
                if (confirm(""Are you sure?"")) {
                    CloseAttendance();
                }
            });
        });

        function ShutdownDesktop(machineName) {
            $.ajax({
                type: ""GET"",
                url: ""/Home/Shutdown"",
                beforeSend: f");
                WriteLiteral(@"unction (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                data: {
                    ""MachineName"": machineName
                },
                success: function (response) {
                    alert(response.message);
                    console.log(response);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        function IntervalUpdate(labId) {
            $.ajax({
                type: ""GET"",
                url: ""/Home/LabInterval"",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').v");
                WriteLiteral(@"al());
                },
                data: {
                    ""LabId"": labId
                },
                success: function (response) {
                    InsertResponseDevices(response);
                    InsertResponseStatuses(response);
                    console.log(response);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        function InsertResponseScreenshots(response) {
            if (response.desktops.length < 1) {
                // code here
            } else {
                for (let i = 0; i < response.desktops.length; i++) {
                    $(""#pTimestamp"" + i).html(""Timestamp: "" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { ""timestamp"": ""no value found"" }).tim");
                WriteLiteral(@"estamp);

                    $(""#img"" + i).attr(""src"", ""data:image/jpg;base64,"" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { ""image"": ""no value found"" }).image);

                    $(""#pDesktopName"" + i).html(""Desktop Name: "" + response.desktops[i].name);
                }
            }
        }

        function InsertResponseScreenshotsAndDevices(response) {
            if (response.desktops.length < 1) {
                // code here
            } else {
                for (let i = 0; i < response.desktops.length; i++) {
                    $(""#pTimestamp"" + i).html(""Timestamp: "" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { ""timestamp"": ""no value found"" }).timestamp);

                    $(""#img"" + i).attr(""src"", ""data:image/jpg;base64,"" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { ""image"": ""no value found"" }).image);

                    ");
                WriteLiteral(@"$(""#pDesktopDevices"" + i).html(response.desktops[i].outputDeviceStatus);

                    $(""#pDesktopName"" + i).html(""Desktop Name: "" + response.desktops[i].name);
                }
            }
        }

        function InsertResponseDevices(response) {
            for (let i = 0; i < response.desktops.length; i++) {
                $(""#pDesktopDevices"" + i).html(response.desktops[i].outputDeviceStatus);

                $(""#pDesktopName"" + i).html(""Desktop Name: "" + response.desktops[i].name);
            }
        }

        function InsertResponseStatuses(response) {
            if (response.desktops.length < 1) {
                // code here
            } else {
                for (let i = 0; i < response.desktops.length; i++) {
                    // online
                    if (response.desktops[i].status) {
                        $(""#p"" + response.desktops[i].desktopId).html(""🟢 Desktop Name: "" + response.desktops[i].name);
                    }
                    ");
                WriteLiteral(@"// offline
                    else {
                        $(""#p"" + response.desktops[i].desktopId).html(""🔴 Desktop Name: "" + response.desktops[i].name);
                    }
                }
            }
        }

        function Update() {
            $.ajax({
                type: ""GET"",
                url: ""/Home/Lab"",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                data: {
                    ""LabId"": $(""#LabId"").val()
                },
                success: function (response) {
                    console.log(response);
                    CreateElementsScreenshotsAndDevices(response);
                    //CreateElementsScreenshots(response);
                    CreateElementsStatuses(response);
                },
                failure: function (response) {
                    console.log(r");
                WriteLiteral(@"esponse.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        function CreateElementsScreenshots(response) {
            if (response.desktops.length < 1) {
                // code here
            } else {
                for (let i = 0; i < response.desktops.length; i++) {
                    $(""#btnGet"").after(""<p id='pTimestamp"" + i + ""'>Timestamp: "" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { timestamp: ""no value found"" }).timestamp + ""</p>"");

                    $(""#btnGet"").after(""<img id='img"" + i + ""' src='data:image/jpg;base64,"" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { image: ""no value found"" }).image + ""' width='150' height='150'/>"");

                    $(""#btnGet"").after(""<p id='pDesktopName"" + i + ""'>Desktop Name: "" + response.desktops[i].name ");
                WriteLiteral(@"+ ""</p>"");
                }
            }
        }

        function CreateElementsStatuses(response) {
            if (response.desktops.length > 0) {
                for (let i = 0; i < response.desktops.length; i++) {
                    // online
                    if (response.desktops[i].status) {
                        $(""#btnShutdown"").after(""<p id='p"" + response.desktops[i].desktopId + ""'>🟢 Desktop Name: "" + response.desktops[i].name + ""</p>"");
                    }
                    // offline
                    else {
                        $(""#btnShutdown"").after(""<p id='p"" + response.desktops[i].desktopId + ""'>🔴 Desktop Name: "" + response.desktops[i].name + ""</p>"");
                    }
                }
            }
        }

        function CreateElementsScreenshotsAndDevices(response) {
            if (response.desktops.length < 1) {
                // code here
            } else {
                for (let i = 0; i < response.desktops.length; i++) {
    ");
                WriteLiteral(@"                $(""#btnGet"").after(""<p id='pTimestamp"" + i + ""'>Timestamp: "" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { timestamp: ""no value found"" }).timestamp + ""</p>"");

                    $(""#btnGet"").after(""<img id='img"" + i + ""' src='data:image/jpg;base64,"" + response.screenshots.find((cv) => (cv.desktopId == response.desktops[i].desktopId) ? cv : { image: ""no value found"" }).image + ""' width='150' height='150'/>"");

                    $(""#btnGet"").after(""<p id='pDesktopDevices"" + i + ""'>"" + response.desktops[i].outputDeviceStatus + ""</p>"");

                    $(""#btnGet"").after(""<p id='pDesktopName"" + i + ""'>Desktop Name: "" + response.desktops[i].name + ""</p>"");

                }
            }
        }

        function CreateAttendance() {
            $.ajax({
                type: ""POST"",
                url: ""/Home/Attendance"",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",");
                WriteLiteral(@"
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                data: {
                    ""Class"": $(""#Class"").val()
                },
                success: function (response) {
                    console.log(response);
                    CreateElement(response);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        function CreateElement(response) {
            if (response.attendance == null) {
                alert(""Invalid operation: Creating attendance was unsuccessful."");
            } else {
                let attendanceId = response.attendance.attendanceId;
                let session = response.attendance.session;
                let theClass = response.attendance.class;

");
                WriteLiteral(@"                $(""#attendances"").after(""<p id='"" + attendanceId + ""'>📌 [Class] "" + theClass + "" [Attendance ID] "" + attendanceId + "" [Session] "" + session + ""</p>"");
            }
        }

        function ReopenAttendance() {
            $.ajax({
                type: ""POST"",
                url: ""/Home/Reopen"",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                data: {
                    ""AttendanceId"": $(""#AttendanceIdReopen"").val()
                },
                success: function (response) {
                    console.log(response);
                    CreateElementReopen(response);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.");
                WriteLiteral(@"responseText);
                }
            });
        }

        function CreateElementReopen(response) {
            if (response.attendance == null) {
                alert(""Invalid operation: the attendance is either already open or not existed"");
            } else {
                let attendanceId = response.attendance.attendanceId;
                let session = response.attendance.session;
                let theClass = response.attendance.class;

                $(""#attendances"").after(""<p id='"" + attendanceId + ""'>📌 [Class] "" + theClass + "" [Attendance ID] "" + attendanceId + "" [Session] "" + session + ""</p>"");
            }
        }

        function CloseAttendance() {
            $.ajax({
                type: ""POST"",
                url: ""/Home/Close"",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                ");
                WriteLiteral(@"data: {
                    ""AttendanceId"": $(""#AttendanceIdClose"").val()
                },
                success: function (response) {
                    console.log(response);
                    RemoveElement(response);
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        function RemoveElement(response) {
            if (response.attendance == null) {
                alert(""Invalid operation: the attendance is either already closed or not existed."");
            } else {
                $(""#"" + response.attendance.attendanceId).remove();
            }
        }

        function ValidateAndShutdownDesktop(machineName, labId) {
            $.ajax({
                type: ""GET"",
                url: ""/Home/LabInterval"",
                be");
                WriteLiteral(@"foreSend: function (xhr) {
                    xhr.setRequestHeader(""XSRF-TOKEN"",
                        $('input:hidden[name=""__RequestVerificationToken""]').val());
                },
                data: {
                    ""LabId"": labId
                },
                success: function (response) {
                    let machine = response.desktops.find((machine) => machine.name == machineName);

                    if (machine != null) {
                        ShutdownDesktop(machine.name);
                    } else {
                        alert(""Operation failed: the machine isn't in the laboratory."");
                    }
                },
                failure: function (response) {
                    console.log(response.responseText);
                },
                error: function (response) {
                    console.log(response.responseText);
                }
            });
        }

        // are used as development reference how ajax result i");
                WriteLiteral(@"s formatted.
        var a = {
            ""desktops"": [
                {
                    ""desktopId"": 1,
                    ""name"": ""vm1"",
                    ""username"": ""virtualmachine1v2"",
                    ""password"": ""virtualmachine1v2"",
                    ""screenshotDirectory"": ""\\\\vmware-host\\Shared Folders\\Users\\Earth Jan\\Documents\\csharp_files\\csharp_codes\\RemoteScreenshot\\Screenshots\\"",
                    ""nircmdDirectory"": ""C:\\Windows\\System32\\nircmd64\\nircmd.exe"",
                    ""userSession"": 2,
                    ""tasklistOutputDirectory"": ""C:\\Users\\Earth Jan\\Documents\\csharp_files\\csharp_codes\\RemoteScreenshot\\TasklistOutputs\\"",
                    ""laboratoryDesktops"": [],
                    ""screenshots"": []
                }
            ],
            ""screenshots"": [
                {
                    ""screenshotId"": 110,
                    ""desktopId"": 1,
                    ""image"": """",
                    ""timestamp"": ""2021");
                WriteLiteral(@"-06-08T01:47:16"",
                    ""desktop"": null
                }
            ]
        };
        var b = {
            ""desktops"": [
                {
                    ""desktopId"": 1,
                    ""name"": ""vm1"",
                    ""username"": ""virtualmachine1v2"",
                    ""password"": ""virtualmachine1v2"",
                    ""screenshotDirectory"": ""\\\\vmware-host\\Shared Folders\\Users\\Earth Jan\\Documents\\csharp_files\\csharp_codes\\RemoteScreenshot\\Screenshots\\"",
                    ""nircmdDirectory"": ""C:\\Windows\\System32\\nircmd64\\nircmd.exe"",
                    ""userSession"": 2,
                    ""tasklistOutputDirectory"": ""C:\\Users\\Earth Jan\\Documents\\csharp_files\\csharp_codes\\RemoteScreenshot\\TasklistOutputs\\"",
                    ""laboratoryDesktops"": [],
                    ""screenshots"": []
                },
                {
                    ""desktopId"": 9,
                    ""name"": ""sample"",
                    ""username"": ");
                WriteLiteral(@"""sample"",
                    ""password"": ""sample"",
                    ""screenshotDirectory"": ""sample"",
                    ""nircmdDirectory"": ""sample"",
                    ""userSession"": 9,
                    ""tasklistOutputDirectory"": ""sample"",
                    ""laboratoryDesktops"": [],
                    ""screenshots"": []
                }
            ],
            ""screenshots"": [
                {
                    ""screenshotId"": 110,
                    ""desktopId"": 1,
                    ""image"": """",
                    ""timestamp"": ""2021-06-08T01:47:16"",
                    ""desktop"": null
                }
            ]
        };
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RemoteScreenshot.Pages.HomeModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RemoteScreenshot.Pages.HomeModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RemoteScreenshot.Pages.HomeModel>)PageContext?.ViewData;
        public RemoteScreenshot.Pages.HomeModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
